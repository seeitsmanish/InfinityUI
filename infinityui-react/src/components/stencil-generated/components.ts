'use client';

/**
 * This file was automatically generated by the Stencil React Output Target.
 * Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
 */

/* eslint-disable */

import { type Event, type IInputFieldCustomEvent } from "@seeitsmanish/infinityui";
import { IAccordionContent as IAccordionContentElement, defineCustomElement as defineIAccordionContent } from "@seeitsmanish/infinityui/dist/components/i-accordion-content.js";
import { IAccordionItem as IAccordionItemElement, defineCustomElement as defineIAccordionItem } from "@seeitsmanish/infinityui/dist/components/i-accordion-item.js";
import { IAccordionTrigger as IAccordionTriggerElement, defineCustomElement as defineIAccordionTrigger } from "@seeitsmanish/infinityui/dist/components/i-accordion-trigger.js";
import { IAccordion as IAccordionElement, defineCustomElement as defineIAccordion } from "@seeitsmanish/infinityui/dist/components/i-accordion.js";
import { IAvatar as IAvatarElement, defineCustomElement as defineIAvatar } from "@seeitsmanish/infinityui/dist/components/i-avatar.js";
import { IButton as IButtonElement, defineCustomElement as defineIButton } from "@seeitsmanish/infinityui/dist/components/i-button.js";
import { ICalendarHeader as ICalendarHeaderElement, defineCustomElement as defineICalendarHeader } from "@seeitsmanish/infinityui/dist/components/i-calendar-header.js";
import { ICalendarMonthView as ICalendarMonthViewElement, defineCustomElement as defineICalendarMonthView } from "@seeitsmanish/infinityui/dist/components/i-calendar-month-view.js";
import { ICalendarYearView as ICalendarYearViewElement, defineCustomElement as defineICalendarYearView } from "@seeitsmanish/infinityui/dist/components/i-calendar-year-view.js";
import { ICalendar as ICalendarElement, defineCustomElement as defineICalendar } from "@seeitsmanish/infinityui/dist/components/i-calendar.js";
import { IChevron as IChevronElement, defineCustomElement as defineIChevron } from "@seeitsmanish/infinityui/dist/components/i-chevron.js";
import { IInputField as IInputFieldElement, defineCustomElement as defineIInputField } from "@seeitsmanish/infinityui/dist/components/i-input-field.js";
import { ISpinner as ISpinnerElement, defineCustomElement as defineISpinner } from "@seeitsmanish/infinityui/dist/components/i-spinner.js";
import type { EventName, StencilReactComponent } from '@stencil/react-output-target/runtime';
import { createComponent } from '@stencil/react-output-target/runtime';
import React from 'react';

type IAccordionEvents = NonNullable<unknown>;

export const IAccordion: StencilReactComponent<IAccordionElement, IAccordionEvents> = /*@__PURE__*/ createComponent<IAccordionElement, IAccordionEvents>({
    tagName: 'i-accordion',
    elementClass: IAccordionElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as IAccordionEvents,
    defineCustomElement: defineIAccordion
});

type IAccordionContentEvents = NonNullable<unknown>;

export const IAccordionContent: StencilReactComponent<IAccordionContentElement, IAccordionContentEvents> = /*@__PURE__*/ createComponent<IAccordionContentElement, IAccordionContentEvents>({
    tagName: 'i-accordion-content',
    elementClass: IAccordionContentElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as IAccordionContentEvents,
    defineCustomElement: defineIAccordionContent
});

type IAccordionItemEvents = NonNullable<unknown>;

export const IAccordionItem: StencilReactComponent<IAccordionItemElement, IAccordionItemEvents> = /*@__PURE__*/ createComponent<IAccordionItemElement, IAccordionItemEvents>({
    tagName: 'i-accordion-item',
    elementClass: IAccordionItemElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as IAccordionItemEvents,
    defineCustomElement: defineIAccordionItem
});

type IAccordionTriggerEvents = { onAccordionTriggerClicked: EventName<CustomEvent<{ key: string }>> };

export const IAccordionTrigger: StencilReactComponent<IAccordionTriggerElement, IAccordionTriggerEvents> = /*@__PURE__*/ createComponent<IAccordionTriggerElement, IAccordionTriggerEvents>({
    tagName: 'i-accordion-trigger',
    elementClass: IAccordionTriggerElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onAccordionTriggerClicked: 'accordionTriggerClicked' } as IAccordionTriggerEvents,
    defineCustomElement: defineIAccordionTrigger
});

type IAvatarEvents = NonNullable<unknown>;

export const IAvatar: StencilReactComponent<IAvatarElement, IAvatarEvents> = /*@__PURE__*/ createComponent<IAvatarElement, IAvatarEvents>({
    tagName: 'i-avatar',
    elementClass: IAvatarElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as IAvatarEvents,
    defineCustomElement: defineIAvatar
});

type IButtonEvents = NonNullable<unknown>;

export const IButton: StencilReactComponent<IButtonElement, IButtonEvents> = /*@__PURE__*/ createComponent<IButtonElement, IButtonEvents>({
    tagName: 'i-button',
    elementClass: IButtonElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as IButtonEvents,
    defineCustomElement: defineIButton
});

type ICalendarEvents = { onDateSelect: EventName<CustomEvent<string>> };

export const ICalendar: StencilReactComponent<ICalendarElement, ICalendarEvents> = /*@__PURE__*/ createComponent<ICalendarElement, ICalendarEvents>({
    tagName: 'i-calendar',
    elementClass: ICalendarElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onDateSelect: 'dateSelect' } as ICalendarEvents,
    defineCustomElement: defineICalendar
});

type ICalendarHeaderEvents = NonNullable<unknown>;

export const ICalendarHeader: StencilReactComponent<ICalendarHeaderElement, ICalendarHeaderEvents> = /*@__PURE__*/ createComponent<ICalendarHeaderElement, ICalendarHeaderEvents>({
    tagName: 'i-calendar-header',
    elementClass: ICalendarHeaderElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as ICalendarHeaderEvents,
    defineCustomElement: defineICalendarHeader
});

type ICalendarMonthViewEvents = NonNullable<unknown>;

export const ICalendarMonthView: StencilReactComponent<ICalendarMonthViewElement, ICalendarMonthViewEvents> = /*@__PURE__*/ createComponent<ICalendarMonthViewElement, ICalendarMonthViewEvents>({
    tagName: 'i-calendar-month-view',
    elementClass: ICalendarMonthViewElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as ICalendarMonthViewEvents,
    defineCustomElement: defineICalendarMonthView
});

type ICalendarYearViewEvents = NonNullable<unknown>;

export const ICalendarYearView: StencilReactComponent<ICalendarYearViewElement, ICalendarYearViewEvents> = /*@__PURE__*/ createComponent<ICalendarYearViewElement, ICalendarYearViewEvents>({
    tagName: 'i-calendar-year-view',
    elementClass: ICalendarYearViewElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as ICalendarYearViewEvents,
    defineCustomElement: defineICalendarYearView
});

type IChevronEvents = NonNullable<unknown>;

export const IChevron: StencilReactComponent<IChevronElement, IChevronEvents> = /*@__PURE__*/ createComponent<IChevronElement, IChevronEvents>({
    tagName: 'i-chevron',
    elementClass: IChevronElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as IChevronEvents,
    defineCustomElement: defineIChevron
});

type IInputFieldEvents = { onValueChange: EventName<IInputFieldCustomEvent<Event>> };

export const IInputField: StencilReactComponent<IInputFieldElement, IInputFieldEvents> = /*@__PURE__*/ createComponent<IInputFieldElement, IInputFieldEvents>({
    tagName: 'i-input-field',
    elementClass: IInputFieldElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onValueChange: 'valueChange' } as IInputFieldEvents,
    defineCustomElement: defineIInputField
});

type ISpinnerEvents = NonNullable<unknown>;

export const ISpinner: StencilReactComponent<ISpinnerElement, ISpinnerEvents> = /*@__PURE__*/ createComponent<ISpinnerElement, ISpinnerEvents>({
    tagName: 'i-spinner',
    elementClass: ISpinnerElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as ISpinnerEvents,
    defineCustomElement: defineISpinner
});
