/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface IAccordion {
        "type": 'single' | 'multiple';
    }
    interface IAccordionContent {
    }
    interface IAccordionItem {
        "disabled": boolean;
        "itemId": string;
    }
    interface IAccordionTrigger {
    }
    interface IButton {
        "classes": string;
        "color": 'default' | 'primary' | 'secondary' | 'success' | 'warning' | 'danger';
        "disableRipple": boolean;
        "disabled": boolean;
        "size": 'xs' | 'sm' | 'md' | 'lg' | 'xl';
        "variant": 'solid' | 'outline' | 'light' | 'flat' | 'ghost' | 'shadow';
    }
    interface ICalendar {
        "color": 'default' | 'primary' | 'secondary' | 'success' | 'warning' | 'danger';
        "maxDate"?: string;
        "minDate"?: string;
        "readOnly": boolean;
        "selected"?: string;
    }
    interface ICalendarHeader {
        "calendarHeading"?: JSX.Element | HTMLElement | string;
        "handleNext"?: () => void;
        "handlePrev"?: () => void;
        "readOnly": boolean;
    }
    interface ICalendarMonthView {
        "color": 'default' | 'primary' | 'secondary' | 'success' | 'warning' | 'danger';
        "handleDateSelection"?: (date: string) => void;
        "maxDate"?: string;
        "minDate"?: string;
        "monthInView": number;
        "readOnly": boolean;
        "selected"?: string;
        "yearInView": number;
    }
    interface IChevron {
        "direction": 'up' | 'down' | 'left' | 'right';
    }
    interface ISpinner {
        "color": 'default' | 'primary' | 'secondary' | 'success' | 'warning' | 'danger' | string;
        "emptyColor": string;
        "size": 'xs' | 'sm' | 'md' | 'lg' | 'xl';
        "speed": string;
        "thickness": string;
    }
}
export interface IAccordionTriggerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIAccordionTriggerElement;
}
export interface ICalendarCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLICalendarElement;
}
declare global {
    interface HTMLIAccordionElement extends Components.IAccordion, HTMLStencilElement {
    }
    var HTMLIAccordionElement: {
        prototype: HTMLIAccordionElement;
        new (): HTMLIAccordionElement;
    };
    interface HTMLIAccordionContentElement extends Components.IAccordionContent, HTMLStencilElement {
    }
    var HTMLIAccordionContentElement: {
        prototype: HTMLIAccordionContentElement;
        new (): HTMLIAccordionContentElement;
    };
    interface HTMLIAccordionItemElement extends Components.IAccordionItem, HTMLStencilElement {
    }
    var HTMLIAccordionItemElement: {
        prototype: HTMLIAccordionItemElement;
        new (): HTMLIAccordionItemElement;
    };
    interface HTMLIAccordionTriggerElementEventMap {
        "accordionTriggerClicked": { key: string };
    }
    interface HTMLIAccordionTriggerElement extends Components.IAccordionTrigger, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIAccordionTriggerElementEventMap>(type: K, listener: (this: HTMLIAccordionTriggerElement, ev: IAccordionTriggerCustomEvent<HTMLIAccordionTriggerElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIAccordionTriggerElementEventMap>(type: K, listener: (this: HTMLIAccordionTriggerElement, ev: IAccordionTriggerCustomEvent<HTMLIAccordionTriggerElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIAccordionTriggerElement: {
        prototype: HTMLIAccordionTriggerElement;
        new (): HTMLIAccordionTriggerElement;
    };
    interface HTMLIButtonElement extends Components.IButton, HTMLStencilElement {
    }
    var HTMLIButtonElement: {
        prototype: HTMLIButtonElement;
        new (): HTMLIButtonElement;
    };
    interface HTMLICalendarElementEventMap {
        "select": string;
    }
    interface HTMLICalendarElement extends Components.ICalendar, HTMLStencilElement {
        addEventListener<K extends keyof HTMLICalendarElementEventMap>(type: K, listener: (this: HTMLICalendarElement, ev: ICalendarCustomEvent<HTMLICalendarElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLICalendarElementEventMap>(type: K, listener: (this: HTMLICalendarElement, ev: ICalendarCustomEvent<HTMLICalendarElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLICalendarElement: {
        prototype: HTMLICalendarElement;
        new (): HTMLICalendarElement;
    };
    interface HTMLICalendarHeaderElement extends Components.ICalendarHeader, HTMLStencilElement {
    }
    var HTMLICalendarHeaderElement: {
        prototype: HTMLICalendarHeaderElement;
        new (): HTMLICalendarHeaderElement;
    };
    interface HTMLICalendarMonthViewElement extends Components.ICalendarMonthView, HTMLStencilElement {
    }
    var HTMLICalendarMonthViewElement: {
        prototype: HTMLICalendarMonthViewElement;
        new (): HTMLICalendarMonthViewElement;
    };
    interface HTMLIChevronElement extends Components.IChevron, HTMLStencilElement {
    }
    var HTMLIChevronElement: {
        prototype: HTMLIChevronElement;
        new (): HTMLIChevronElement;
    };
    interface HTMLISpinnerElement extends Components.ISpinner, HTMLStencilElement {
    }
    var HTMLISpinnerElement: {
        prototype: HTMLISpinnerElement;
        new (): HTMLISpinnerElement;
    };
    interface HTMLElementTagNameMap {
        "i-accordion": HTMLIAccordionElement;
        "i-accordion-content": HTMLIAccordionContentElement;
        "i-accordion-item": HTMLIAccordionItemElement;
        "i-accordion-trigger": HTMLIAccordionTriggerElement;
        "i-button": HTMLIButtonElement;
        "i-calendar": HTMLICalendarElement;
        "i-calendar-header": HTMLICalendarHeaderElement;
        "i-calendar-month-view": HTMLICalendarMonthViewElement;
        "i-chevron": HTMLIChevronElement;
        "i-spinner": HTMLISpinnerElement;
    }
}
declare namespace LocalJSX {
    interface IAccordion {
        "type"?: 'single' | 'multiple';
    }
    interface IAccordionContent {
    }
    interface IAccordionItem {
        "disabled"?: boolean;
        "itemId"?: string;
    }
    interface IAccordionTrigger {
        "onAccordionTriggerClicked"?: (event: IAccordionTriggerCustomEvent<{ key: string }>) => void;
    }
    interface IButton {
        "classes"?: string;
        "color"?: 'default' | 'primary' | 'secondary' | 'success' | 'warning' | 'danger';
        "disableRipple"?: boolean;
        "disabled"?: boolean;
        "size"?: 'xs' | 'sm' | 'md' | 'lg' | 'xl';
        "variant"?: 'solid' | 'outline' | 'light' | 'flat' | 'ghost' | 'shadow';
    }
    interface ICalendar {
        "color"?: 'default' | 'primary' | 'secondary' | 'success' | 'warning' | 'danger';
        "maxDate"?: string;
        "minDate"?: string;
        "onSelect"?: (event: ICalendarCustomEvent<string>) => void;
        "readOnly"?: boolean;
        "selected"?: string;
    }
    interface ICalendarHeader {
        "calendarHeading"?: JSX.Element | HTMLElement | string;
        "handleNext"?: () => void;
        "handlePrev"?: () => void;
        "readOnly"?: boolean;
    }
    interface ICalendarMonthView {
        "color"?: 'default' | 'primary' | 'secondary' | 'success' | 'warning' | 'danger';
        "handleDateSelection"?: (date: string) => void;
        "maxDate"?: string;
        "minDate"?: string;
        "monthInView"?: number;
        "readOnly"?: boolean;
        "selected"?: string;
        "yearInView"?: number;
    }
    interface IChevron {
        "direction"?: 'up' | 'down' | 'left' | 'right';
    }
    interface ISpinner {
        "color"?: 'default' | 'primary' | 'secondary' | 'success' | 'warning' | 'danger' | string;
        "emptyColor"?: string;
        "size"?: 'xs' | 'sm' | 'md' | 'lg' | 'xl';
        "speed"?: string;
        "thickness"?: string;
    }
    interface IntrinsicElements {
        "i-accordion": IAccordion;
        "i-accordion-content": IAccordionContent;
        "i-accordion-item": IAccordionItem;
        "i-accordion-trigger": IAccordionTrigger;
        "i-button": IButton;
        "i-calendar": ICalendar;
        "i-calendar-header": ICalendarHeader;
        "i-calendar-month-view": ICalendarMonthView;
        "i-chevron": IChevron;
        "i-spinner": ISpinner;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "i-accordion": LocalJSX.IAccordion & JSXBase.HTMLAttributes<HTMLIAccordionElement>;
            "i-accordion-content": LocalJSX.IAccordionContent & JSXBase.HTMLAttributes<HTMLIAccordionContentElement>;
            "i-accordion-item": LocalJSX.IAccordionItem & JSXBase.HTMLAttributes<HTMLIAccordionItemElement>;
            "i-accordion-trigger": LocalJSX.IAccordionTrigger & JSXBase.HTMLAttributes<HTMLIAccordionTriggerElement>;
            "i-button": LocalJSX.IButton & JSXBase.HTMLAttributes<HTMLIButtonElement>;
            "i-calendar": LocalJSX.ICalendar & JSXBase.HTMLAttributes<HTMLICalendarElement>;
            "i-calendar-header": LocalJSX.ICalendarHeader & JSXBase.HTMLAttributes<HTMLICalendarHeaderElement>;
            "i-calendar-month-view": LocalJSX.ICalendarMonthView & JSXBase.HTMLAttributes<HTMLICalendarMonthViewElement>;
            "i-chevron": LocalJSX.IChevron & JSXBase.HTMLAttributes<HTMLIChevronElement>;
            "i-spinner": LocalJSX.ISpinner & JSXBase.HTMLAttributes<HTMLISpinnerElement>;
        }
    }
}
